
# ALGORITHM_SETUP
# algorithm: hc_rs_16384
# algorithm(class): aitoa.algorithms.HillClimberWithRestarts
# failsBeforeRestart: 16384
# failsBeforeRestartStrategy: 16384
# END_ALGORITHM_SETUP

# BEGIN_LOG
# fbest;consumedFEs;consumedTimeMS
1780;1;0
1717;2;0
1682;3;0
1631;7;0
1602;9;0
1517;37;0
1512;55;0
1506;57;0
1494;59;0
1448;84;0
1404;99;0
1356;135;0
1351;159;0
1345;177;0
1330;207;0
1320;220;0
1316;224;0
1309;259;1
1303;270;1
1301;326;1
1288;339;1
1279;377;1
1276;379;1
1274;465;1
1242;497;1
1241;662;1
1240;1249;2
1239;1269;2
1222;1315;2
1191;1690;2
1190;1739;2
1170;1776;3
1164;1867;3
1163;1900;3
1158;2119;3
1157;2130;3
1156;2204;3
1148;2225;3
1138;5475;8
1136;6960;10
1129;6978;10
1115;7204;10
1111;7313;10
1095;7534;11
1087;7672;12
1079;8140;12
1067;130222;176
1065;131384;177
1062;131476;177
1060;131717;178
1056;177367;240
1046;177374;240
1044;181511;246
1043;181634;246
1039;181676;246
1032;181789;246
1024;182916;248
1021;185199;251
1014;264138;359
1012;431528;583
1007;432505;585
1005;432631;585
1001;434177;587
998;544193;737
996;544331;738
994;544508;738
987;546787;741
984;20789282;27860
983;20794521;27867
979;20795016;27868
976;20795053;27868
# END_OF_LOG

# BEGIN_SETUP
# SEARCH_SPACE: jssp:int[150]:la24:aitoa.examples.jssp.JSSPSearchSpace
# SEARCH_SPACE(class): aitoa.examples.jssp.JSSPSearchSpace
# NULLARY_OP: uniform
# NULLARY_OP(class): aitoa.examples.jssp.JSSPNullaryOperator
# UNARY_OP: 1swap
# UNARY_OP(class): aitoa.examples.jssp.JSSPUnaryOperator1Swap
# BINARY_OP: null
# TERNARY_OP: null
# SOLUTION_SPACE: jssp:gantt:la24:aitoa.examples.jssp.JSSPSolutionSpace
# SOLUTION_SPACE(class): aitoa.examples.jssp.JSSPSolutionSpace
# REPRESENTATION_MAPPING: jssp:int[]-to-Gantt:aitoa.examples.jssp.JSSPRepresentationMapping
# REPRESENTATION_MAPPING(class): aitoa.examples.jssp.JSSPRepresentationMapping
# OBJECTIVE_FUNCTION: la24
# OBJECTIVE_FUNCTION(class): aitoa.examples.jssp.JSSPMakespanObjectiveFunction
# MAX_FES: 9223372036854775807
# MAX_TIME: 180000
# GOAL_F: -Infinity
# RANDOM_SEED: 0x07f47389e9e3c9d7
# END_SETUP
# BEGIN_SYSTEM
# COMPUTER_MANUFACTURER: Dell Inc.
# COMPUTER_MODEL: Vostro 3480
# CPU_FAMILY: 6
# CPU_FREQUENCY_HZ: 1800000000
# CPU_ID: AFC1FBFF008006EB
# CPU_IDENTIFIER: Intel64 Family 6 Model 142 Stepping 11
# CPU_IS_64_BIT: true
# CPU_LOGICAL_CORES: 8
# CPU_MODEL: 142
# CPU_NAME: Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz
# CPU_PHYSICAL_CORES: 4
# CPU_PHYSICAL_SLOTS: 1
# CPU_VENDOR: GenuineIntel
# GPU_NAME: Advanced Micro Devices, Inc. [AMD/ATI] Jet PRO [Radeon R5 M230 / R7 M260DX / Radeon 520 Mobile]
# GPU_PCI_DEVICE_ID: 6665
# GPU_PCI_VENDOR_ID: 1002
# JAVA_SPECIFICATION_NAME: Java Platform API Specification
# JAVA_SPECIFICATION_VENDOR: Oracle Corporation
# JAVA_SPECIFICATION_VERSION: 13
# JAVA_VENDOR: Private Build
# JAVA_VERSION: 13
# JAVA_VM_NAME: OpenJDK 64-Bit Server VM
# JAVA_VM_VENDOR: Private Build
# JAVA_VM_VERSION: 13+33-Ubuntu-1
# MAINBOARD_MANUFACTURER: Dell Inc.
# MAINBOARD_MODEL: 0KTK89
# MAINBOARD_VERSION: A00
# MEMORY_PAGE_SIZE: 4096
# MEMORY_TOTAL_BYTES: 16662446080
# NET_DOMAIN_NAME: laptop
# NET_HOST_NAME: laptop
# OS_BITS: 64
# OS_BUILD: 5.3.0-29-generic
# OS_CODENAME: Eoan Ermine
# OS_FAMILY: Ubuntu
# OS_MANUFACTURER: GNU/Linux
# OS_VERSION: 19.10
# PROCESS_COMMAND_LINE: java -classpath ./binaries/aitoa-code-0.8.33-full.jar aitoa.examples.jssp.JSSPExperiment ./results 4
# PROCESS_ID: 26719
# SESSION_START_DATE_TIME: 2020-02-23T07:25:35.078340Z
# version.aitoa: 0.8.33
# version.aitoa.java.build: 13
# version.aitoa.java.source: 1.8
# version.aitoa.junit: 4.13
# version.aitoa.oshi: 4.3.0
# version.aitoa.slf4j: 1.7.30
# END_SYSTEM

# BEGIN_STATE
# CONSUMED_FES: 134844108
# LAST_IMPROVEMENT_FE: 20795053
# CONSUMED_TIME: 180001
# LAST_IMPROVEMENT_TIME: 27868
# BEST_F: 976
# END_STATE
# BEST_X
new int[]{ 7, 0, 0, 14, 4, 2, 14, 6, 8, 3, 5, 11, 6, 2, 1, 4, 1, 11, 6, 13, 2, 12, 0, 8, 12, 1, 5, 3, 7, 9, 3, 4, 11, 7, 9, 12, 9, 5, 0, 1, 7, 11, 3, 10, 13, 12, 6, 11, 0, 4, 2, 10, 2, 11, 3, 14, 14, 14, 9, 13, 8, 8, 7, 6, 0, 4, 7, 8, 11, 5, 4, 6, 4, 6, 9, 10, 7, 11, 10, 12, 12, 0, 3, 14, 2, 8, 1, 0, 10, 13, 14, 7, 5, 1, 5, 4, 3, 8, 12, 9, 14, 13, 6, 4, 2, 13, 7, 12, 1, 3, 9, 13, 1, 5, 6, 8, 1, 4, 9, 12, 10, 1, 14, 3, 8, 13, 11, 8, 2, 3, 5, 10, 10, 10, 6, 5, 7, 9, 0, 2, 9, 14, 0, 13, 13, 5, 10, 11, 2, 12}
# END_BEST_X
# BEST_Y
new aitoa.examples.jssp.JSSPCandidateSolution(new int[][] {
{ 11, 0, 68, 0, 83, 155, 8, 155, 194, 5, 194, 243, 9, 243, 248, 1, 248, 271, 2, 356, 411, 14, 415, 462, 3, 462, 553, 4, 553, 596, 6, 596, 671, 7, 671, 743, 12, 743, 823, 10, 823, 847, 13, 847, 942},
{ 2, 0, 50, 3, 50, 118, 12, 162, 222, 6, 260, 350, 4, 356, 426, 9, 467, 555, 11, 555, 573, 1, 573, 658, 7, 658, 667, 5, 667, 736, 14, 736, 764, 13, 769, 792, 8, 792, 872, 10, 882, 931, 0, 931, 957},
{ 14, 0, 24, 6, 71, 162, 4, 162, 196, 11, 203, 280, 13, 280, 372, 7, 383, 474, 12, 474, 514, 0, 514, 552, 2, 552, 613, 10, 613, 631, 8, 631, 694, 9, 694, 762, 1, 762, 829, 3, 829, 901, 5, 935, 944},
{ 2, 50, 143, 11, 143, 203, 1, 203, 246, 12, 246, 302, 9, 302, 352, 7, 352, 383, 10, 389, 480, 4, 500, 512, 8, 538, 590, 14, 590, 667, 3, 667, 763, 13, 763, 769, 6, 769, 786, 5, 908, 935, 0, 957, 976},
{ 8, 0, 35, 13, 35, 45, 3, 161, 260, 5, 260, 319, 0, 319, 349, 2, 349, 356, 7, 474, 512, 6, 512, 520, 10, 520, 553, 1, 658, 697, 4, 724, 754, 9, 786, 839, 14, 839, 887, 11, 887, 905, 12, 912, 963},
{ 14, 24, 53, 2, 143, 223, 7, 251, 349, 4, 349, 356, 11, 360, 375, 3, 375, 443, 13, 443, 466, 8, 466, 491, 5, 491, 563, 10, 563, 582, 0, 582, 680, 1, 697, 710, 6, 710, 747, 9, 762, 786, 12, 823, 912},
{ 6, 0, 71, 1, 71, 90, 0, 155, 229, 3, 260, 320, 12, 320, 411, 4, 426, 500, 14, 500, 577, 13, 577, 623, 9, 623, 643, 2, 643, 700, 10, 700, 738, 8, 738, 773, 11, 773, 863, 5, 863, 908, 7, 908, 957},
{ 0, 0, 8, 4, 8, 92, 3, 118, 161, 7, 161, 251, 11, 280, 290, 10, 290, 389, 8, 491, 538, 6, 538, 588, 12, 600, 672, 14, 672, 680, 13, 680, 752, 5, 752, 851, 1, 851, 860, 9, 860, 917, 2, 924, 970},
{ 7, 0, 62, 5, 62, 122, 1, 122, 195, 6, 195, 260, 4, 260, 300, 11, 300, 360, 14, 360, 415, 9, 415, 467, 0, 467, 510, 12, 514, 600, 3, 600, 611, 13, 623, 663, 8, 694, 715, 2, 715, 787, 10, 931, 940},
{ 0, 8, 83, 12, 83, 162, 9, 162, 220, 14, 220, 269, 8, 269, 343, 6, 350, 448, 11, 448, 520, 7, 520, 592, 5, 592, 655, 4, 655, 724, 1, 724, 750, 3, 763, 774, 10, 847, 882, 2, 882, 924, 13, 942, 976}})

if(!(require("plotteR"))){
if(!(require("devtools"))){
install.packages("devtools");
library("devtools");
};
devtools::install_github("thomasWeise/plotteR");
library("plotteR");
};
plot.gantt(list(
 list( list(job=11L,start=0L,end=68L)
,list(job=0L,start=83L,end=155L)
,list(job=8L,start=155L,end=194L)
,list(job=5L,start=194L,end=243L)
,list(job=9L,start=243L,end=248L)
,list(job=1L,start=248L,end=271L)
,list(job=2L,start=356L,end=411L)
,list(job=14L,start=415L,end=462L)
,list(job=3L,start=462L,end=553L)
,list(job=4L,start=553L,end=596L)
,list(job=6L,start=596L,end=671L)
,list(job=7L,start=671L,end=743L)
,list(job=12L,start=743L,end=823L)
,list(job=10L,start=823L,end=847L)
,list(job=13L,start=847L,end=942L)
)
,list( list(job=2L,start=0L,end=50L)
,list(job=3L,start=50L,end=118L)
,list(job=12L,start=162L,end=222L)
,list(job=6L,start=260L,end=350L)
,list(job=4L,start=356L,end=426L)
,list(job=9L,start=467L,end=555L)
,list(job=11L,start=555L,end=573L)
,list(job=1L,start=573L,end=658L)
,list(job=7L,start=658L,end=667L)
,list(job=5L,start=667L,end=736L)
,list(job=14L,start=736L,end=764L)
,list(job=13L,start=769L,end=792L)
,list(job=8L,start=792L,end=872L)
,list(job=10L,start=882L,end=931L)
,list(job=0L,start=931L,end=957L)
)
,list( list(job=14L,start=0L,end=24L)
,list(job=6L,start=71L,end=162L)
,list(job=4L,start=162L,end=196L)
,list(job=11L,start=203L,end=280L)
,list(job=13L,start=280L,end=372L)
,list(job=7L,start=383L,end=474L)
,list(job=12L,start=474L,end=514L)
,list(job=0L,start=514L,end=552L)
,list(job=2L,start=552L,end=613L)
,list(job=10L,start=613L,end=631L)
,list(job=8L,start=631L,end=694L)
,list(job=9L,start=694L,end=762L)
,list(job=1L,start=762L,end=829L)
,list(job=3L,start=829L,end=901L)
,list(job=5L,start=935L,end=944L)
)
,list( list(job=2L,start=50L,end=143L)
,list(job=11L,start=143L,end=203L)
,list(job=1L,start=203L,end=246L)
,list(job=12L,start=246L,end=302L)
,list(job=9L,start=302L,end=352L)
,list(job=7L,start=352L,end=383L)
,list(job=10L,start=389L,end=480L)
,list(job=4L,start=500L,end=512L)
,list(job=8L,start=538L,end=590L)
,list(job=14L,start=590L,end=667L)
,list(job=3L,start=667L,end=763L)
,list(job=13L,start=763L,end=769L)
,list(job=6L,start=769L,end=786L)
,list(job=5L,start=908L,end=935L)
,list(job=0L,start=957L,end=976L)
)
,list( list(job=8L,start=0L,end=35L)
,list(job=13L,start=35L,end=45L)
,list(job=3L,start=161L,end=260L)
,list(job=5L,start=260L,end=319L)
,list(job=0L,start=319L,end=349L)
,list(job=2L,start=349L,end=356L)
,list(job=7L,start=474L,end=512L)
,list(job=6L,start=512L,end=520L)
,list(job=10L,start=520L,end=553L)
,list(job=1L,start=658L,end=697L)
,list(job=4L,start=724L,end=754L)
,list(job=9L,start=786L,end=839L)
,list(job=14L,start=839L,end=887L)
,list(job=11L,start=887L,end=905L)
,list(job=12L,start=912L,end=963L)
)
,list( list(job=14L,start=24L,end=53L)
,list(job=2L,start=143L,end=223L)
,list(job=7L,start=251L,end=349L)
,list(job=4L,start=349L,end=356L)
,list(job=11L,start=360L,end=375L)
,list(job=3L,start=375L,end=443L)
,list(job=13L,start=443L,end=466L)
,list(job=8L,start=466L,end=491L)
,list(job=5L,start=491L,end=563L)
,list(job=10L,start=563L,end=582L)
,list(job=0L,start=582L,end=680L)
,list(job=1L,start=697L,end=710L)
,list(job=6L,start=710L,end=747L)
,list(job=9L,start=762L,end=786L)
,list(job=12L,start=823L,end=912L)
)
,list( list(job=6L,start=0L,end=71L)
,list(job=1L,start=71L,end=90L)
,list(job=0L,start=155L,end=229L)
,list(job=3L,start=260L,end=320L)
,list(job=12L,start=320L,end=411L)
,list(job=4L,start=426L,end=500L)
,list(job=14L,start=500L,end=577L)
,list(job=13L,start=577L,end=623L)
,list(job=9L,start=623L,end=643L)
,list(job=2L,start=643L,end=700L)
,list(job=10L,start=700L,end=738L)
,list(job=8L,start=738L,end=773L)
,list(job=11L,start=773L,end=863L)
,list(job=5L,start=863L,end=908L)
,list(job=7L,start=908L,end=957L)
)
,list( list(job=0L,start=0L,end=8L)
,list(job=4L,start=8L,end=92L)
,list(job=3L,start=118L,end=161L)
,list(job=7L,start=161L,end=251L)
,list(job=11L,start=280L,end=290L)
,list(job=10L,start=290L,end=389L)
,list(job=8L,start=491L,end=538L)
,list(job=6L,start=538L,end=588L)
,list(job=12L,start=600L,end=672L)
,list(job=14L,start=672L,end=680L)
,list(job=13L,start=680L,end=752L)
,list(job=5L,start=752L,end=851L)
,list(job=1L,start=851L,end=860L)
,list(job=9L,start=860L,end=917L)
,list(job=2L,start=924L,end=970L)
)
,list( list(job=7L,start=0L,end=62L)
,list(job=5L,start=62L,end=122L)
,list(job=1L,start=122L,end=195L)
,list(job=6L,start=195L,end=260L)
,list(job=4L,start=260L,end=300L)
,list(job=11L,start=300L,end=360L)
,list(job=14L,start=360L,end=415L)
,list(job=9L,start=415L,end=467L)
,list(job=0L,start=467L,end=510L)
,list(job=12L,start=514L,end=600L)
,list(job=3L,start=600L,end=611L)
,list(job=13L,start=623L,end=663L)
,list(job=8L,start=694L,end=715L)
,list(job=2L,start=715L,end=787L)
,list(job=10L,start=931L,end=940L)
)
,list( list(job=0L,start=8L,end=83L)
,list(job=12L,start=83L,end=162L)
,list(job=9L,start=162L,end=220L)
,list(job=14L,start=220L,end=269L)
,list(job=8L,start=269L,end=343L)
,list(job=6L,start=350L,end=448L)
,list(job=11L,start=448L,end=520L)
,list(job=7L,start=520L,end=592L)
,list(job=5L,start=592L,end=655L)
,list(job=4L,start=655L,end=724L)
,list(job=1L,start=724L,end=750L)
,list(job=3L,start=763L,end=774L)
,list(job=10L,start=847L,end=882L)
,list(job=2L,start=882L,end=924L)
,list(job=13L,start=942L,end=976L)
)
), prefix.job="");
# END_BEST_Y